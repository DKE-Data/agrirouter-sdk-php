<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: messaging/response/payload/account/endpoints.proto

namespace Agrirouter\Response\Payload\Account\ListEndpointsResponse;

use Agrirouter\Response\Payload\Account\ListEndpointsResponse_Endpoint;
use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\Message;
use Google\Protobuf\Internal\RepeatedField;
use GPBMetadata\Messaging\Response\Payload\Account\Endpoints;

/**
 * Generated from protobuf message <code>agrirouter.response.payload.account.ListEndpointsResponse.Endpoint</code>
 */
class Endpoint extends Message
{
    /**
     * ID Of the endpoint for which the message types can be sent
     *
     * Generated from protobuf field <code>string endpoint_id = 1;</code>
     */
    protected $endpoint_id = '';
    /**
     * Text name of the endpoint
     *
     * Generated from protobuf field <code>string endpoint_name = 2;</code>
     */
    protected $endpoint_name = '';
    /**
     * The type of end point IE: Application, Paired Account, Virtual CU, etc
     *
     * Generated from protobuf field <code>string endpoint_type = 3;</code>
     */
    protected $endpoint_type = '';
    /**
     * Specifies if the endpoint is active or inactive
     *
     * Generated from protobuf field <code>string status = 4;</code>
     */
    protected $status = '';
    /**
     * Details of the message types as detailed above
     *
     * Generated from protobuf field <code>repeated .agrirouter.response.payload.account.ListEndpointsResponse.MessageType message_types = 5;</code>
     */
    private $message_types;
    /**
     * External id of the endpoint
     *
     * Generated from protobuf field <code>string external_id = 6;</code>
     */
    protected $external_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $endpoint_id
     *           ID Of the endpoint for which the message types can be sent
     *     @type string $endpoint_name
     *           Text name of the endpoint
     *     @type string $endpoint_type
     *           The type of end point IE: Application, Paired Account, Virtual CU, etc
     *     @type string $status
     *           Specifies if the endpoint is active or inactive
     *     @type MessageType[]|RepeatedField $message_types
     *           Details of the message types as detailed above
     *     @type string $external_id
     *           External id of the endpoint
     * }
     */
    public function __construct($data = NULL) {
        Endpoints::initOnce();
        parent::__construct($data);
    }

    /**
     * ID Of the endpoint for which the message types can be sent
     *
     * Generated from protobuf field <code>string endpoint_id = 1;</code>
     * @return string
     */
    public function getEndpointId()
    {
        return $this->endpoint_id;
    }

    /**
     * ID Of the endpoint for which the message types can be sent
     *
     * Generated from protobuf field <code>string endpoint_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setEndpointId($var)
    {
        GPBUtil::checkString($var, True);
        $this->endpoint_id = $var;

        return $this;
    }

    /**
     * Text name of the endpoint
     *
     * Generated from protobuf field <code>string endpoint_name = 2;</code>
     * @return string
     */
    public function getEndpointName()
    {
        return $this->endpoint_name;
    }

    /**
     * Text name of the endpoint
     *
     * Generated from protobuf field <code>string endpoint_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setEndpointName($var)
    {
        GPBUtil::checkString($var, True);
        $this->endpoint_name = $var;

        return $this;
    }

    /**
     * The type of end point IE: Application, Paired Account, Virtual CU, etc
     *
     * Generated from protobuf field <code>string endpoint_type = 3;</code>
     * @return string
     */
    public function getEndpointType()
    {
        return $this->endpoint_type;
    }

    /**
     * The type of end point IE: Application, Paired Account, Virtual CU, etc
     *
     * Generated from protobuf field <code>string endpoint_type = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setEndpointType($var)
    {
        GPBUtil::checkString($var, True);
        $this->endpoint_type = $var;

        return $this;
    }

    /**
     * Specifies if the endpoint is active or inactive
     *
     * Generated from protobuf field <code>string status = 4;</code>
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Specifies if the endpoint is active or inactive
     *
     * Generated from protobuf field <code>string status = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkString($var, True);
        $this->status = $var;

        return $this;
    }

    /**
     * Details of the message types as detailed above
     *
     * Generated from protobuf field <code>repeated .agrirouter.response.payload.account.ListEndpointsResponse.MessageType message_types = 5;</code>
     * @return RepeatedField
     */
    public function getMessageTypes()
    {
        return $this->message_types;
    }

    /**
     * Details of the message types as detailed above
     *
     * Generated from protobuf field <code>repeated .agrirouter.response.payload.account.ListEndpointsResponse.MessageType message_types = 5;</code>
     * @param MessageType[]|RepeatedField $var
     * @return $this
     */
    public function setMessageTypes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, GPBType::MESSAGE, MessageType::class);
        $this->message_types = $arr;

        return $this;
    }

    /**
     * External id of the endpoint
     *
     * Generated from protobuf field <code>string external_id = 6;</code>
     * @return string
     */
    public function getExternalId()
    {
        return $this->external_id;
    }

    /**
     * External id of the endpoint
     *
     * Generated from protobuf field <code>string external_id = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setExternalId($var)
    {
        GPBUtil::checkString($var, True);
        $this->external_id = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Endpoint::class, ListEndpointsResponse_Endpoint::class);

