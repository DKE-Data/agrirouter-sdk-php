<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cloud-provider-integration/cloud-virtualized-app-registration.proto

namespace Agrirouter\Cloud\Registration\OnboardingResponse;

use Agrirouter\Cloud\Registration\OnboardingResponse_EndpointRegistrationDetails;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\Message;
use GPBMetadata\CloudProviderIntegration\CloudVirtualizedAppRegistration;

/**
 * Generated from protobuf message <code>agrirouter.cloud.registration.OnboardingResponse.EndpointRegistrationDetails</code>
 */
class EndpointRegistrationDetails extends Message
{
    /**
     * External ID from the cloud provider
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * The ID for the device used for managing the communication channel with the cloud provider for the associated agrirouter account.
     *
     * Generated from protobuf field <code>string device_alternate_id = 2;</code>
     */
    protected $device_alternate_id = '';
    /**
     * The ID to use for messages related to a specific virtualized endpoint. Would always be 1..1 with the External ID
     *
     * Generated from protobuf field <code>string sensor_alternate_id = 3;</code>
     */
    protected $sensor_alternate_id = '';
    /**
     * The ID for the capability of the sensorAlternateId required for the payload which is communicated with the gateway
     *
     * Generated from protobuf field <code>string capability_alternate_id = 4;</code>
     */
    protected $capability_alternate_id = '';
    /**
     * The ID of the endpoint within the agrirouter
     *
     * Generated from protobuf field <code>string endpoint_id = 5;</code>
     */
    protected $endpoint_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           External ID from the cloud provider
     *     @type string $device_alternate_id
     *           The ID for the device used for managing the communication channel with the cloud provider for the associated agrirouter account.
     *     @type string $sensor_alternate_id
     *           The ID to use for messages related to a specific virtualized endpoint. Would always be 1..1 with the External ID
     *     @type string $capability_alternate_id
     *           The ID for the capability of the sensorAlternateId required for the payload which is communicated with the gateway
     *     @type string $endpoint_id
     *           The ID of the endpoint within the agrirouter
     * }
     */
    public function __construct($data = NULL) {
        CloudVirtualizedAppRegistration::initOnce();
        parent::__construct($data);
    }

    /**
     * External ID from the cloud provider
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * External ID from the cloud provider
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * The ID for the device used for managing the communication channel with the cloud provider for the associated agrirouter account.
     *
     * Generated from protobuf field <code>string device_alternate_id = 2;</code>
     * @return string
     */
    public function getDeviceAlternateId()
    {
        return $this->device_alternate_id;
    }

    /**
     * The ID for the device used for managing the communication channel with the cloud provider for the associated agrirouter account.
     *
     * Generated from protobuf field <code>string device_alternate_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceAlternateId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_alternate_id = $var;

        return $this;
    }

    /**
     * The ID to use for messages related to a specific virtualized endpoint. Would always be 1..1 with the External ID
     *
     * Generated from protobuf field <code>string sensor_alternate_id = 3;</code>
     * @return string
     */
    public function getSensorAlternateId()
    {
        return $this->sensor_alternate_id;
    }

    /**
     * The ID to use for messages related to a specific virtualized endpoint. Would always be 1..1 with the External ID
     *
     * Generated from protobuf field <code>string sensor_alternate_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setSensorAlternateId($var)
    {
        GPBUtil::checkString($var, True);
        $this->sensor_alternate_id = $var;

        return $this;
    }

    /**
     * The ID for the capability of the sensorAlternateId required for the payload which is communicated with the gateway
     *
     * Generated from protobuf field <code>string capability_alternate_id = 4;</code>
     * @return string
     */
    public function getCapabilityAlternateId()
    {
        return $this->capability_alternate_id;
    }

    /**
     * The ID for the capability of the sensorAlternateId required for the payload which is communicated with the gateway
     *
     * Generated from protobuf field <code>string capability_alternate_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setCapabilityAlternateId($var)
    {
        GPBUtil::checkString($var, True);
        $this->capability_alternate_id = $var;

        return $this;
    }

    /**
     * The ID of the endpoint within the agrirouter
     *
     * Generated from protobuf field <code>string endpoint_id = 5;</code>
     * @return string
     */
    public function getEndpointId()
    {
        return $this->endpoint_id;
    }

    /**
     * The ID of the endpoint within the agrirouter
     *
     * Generated from protobuf field <code>string endpoint_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setEndpointId($var)
    {
        GPBUtil::checkString($var, True);
        $this->endpoint_id = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(EndpointRegistrationDetails::class, OnboardingResponse_EndpointRegistrationDetails::class);

