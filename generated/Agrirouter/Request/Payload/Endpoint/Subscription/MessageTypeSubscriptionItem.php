<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: messaging/request/payload/endpoint/subscription.proto

namespace Agrirouter\Request\Payload\Endpoint\Subscription;

use Agrirouter\Request\Payload\Endpoint\Subscription_MessageTypeSubscriptionItem;
use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\Message;
use Google\Protobuf\Internal\RepeatedField;
use GPBMetadata\Messaging\Request\Payload\Endpoint\Subscription;

/**
 * Generated from protobuf message <code>agrirouter.request.payload.endpoint.Subscription.MessageTypeSubscriptionItem</code>
 */
class MessageTypeSubscriptionItem extends Message
{
    /**
     * Technical Message type from the agrirouter
     *
     * Generated from protobuf field <code>string technical_message_type = 1;</code>
     */
    protected $technical_message_type = '';
    /**
     * Applicable only for Telemetry Messages these are the DDI Codes to subscribe to
     *
     * Generated from protobuf field <code>repeated uint32 ddis = 2;</code>
     */
    private $ddis;
    /**
     * Applicable only for Telemetry Messages to subscribe to GeoLocation Position information
     *
     * Generated from protobuf field <code>bool position = 3;</code>
     */
    protected $position = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $technical_message_type
     *           Technical Message type from the agrirouter
     *     @type int[]|RepeatedField $ddis
     *           Applicable only for Telemetry Messages these are the DDI Codes to subscribe to
     *     @type bool $position
     *           Applicable only for Telemetry Messages to subscribe to GeoLocation Position information
     * }
     */
    public function __construct($data = NULL) {
        Subscription::initOnce();
        parent::__construct($data);
    }

    /**
     * Technical Message type from the agrirouter
     *
     * Generated from protobuf field <code>string technical_message_type = 1;</code>
     * @return string
     */
    public function getTechnicalMessageType()
    {
        return $this->technical_message_type;
    }

    /**
     * Technical Message type from the agrirouter
     *
     * Generated from protobuf field <code>string technical_message_type = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setTechnicalMessageType($var)
    {
        GPBUtil::checkString($var, True);
        $this->technical_message_type = $var;

        return $this;
    }

    /**
     * Applicable only for Telemetry Messages these are the DDI Codes to subscribe to
     *
     * Generated from protobuf field <code>repeated uint32 ddis = 2;</code>
     * @return RepeatedField
     */
    public function getDdis()
    {
        return $this->ddis;
    }

    /**
     * Applicable only for Telemetry Messages these are the DDI Codes to subscribe to
     *
     * Generated from protobuf field <code>repeated uint32 ddis = 2;</code>
     * @param int[]|RepeatedField $var
     * @return $this
     */
    public function setDdis($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, GPBType::UINT32);
        $this->ddis = $arr;

        return $this;
    }

    /**
     * Applicable only for Telemetry Messages to subscribe to GeoLocation Position information
     *
     * Generated from protobuf field <code>bool position = 3;</code>
     * @return bool
     */
    public function getPosition()
    {
        return $this->position;
    }

    /**
     * Applicable only for Telemetry Messages to subscribe to GeoLocation Position information
     *
     * Generated from protobuf field <code>bool position = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setPosition($var)
    {
        GPBUtil::checkBool($var);
        $this->position = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(MessageTypeSubscriptionItem::class, Subscription_MessageTypeSubscriptionItem::class);

